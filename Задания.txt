ЗАДАЧИ OPENMP

1 Разработайте программу для вычисления скалярного произведения двух векторов.
2 Умножение матрицы на вектор при разделении данных по строкам.
3 Умножение матрицы на вектор при разделении данных по столбцам.   
4 Умножение матрицы на вектор при блочном разделении данных.
5 Умножение матриц, ленточный алгоритм.
6 Умножение матриц, блочные схемы распределения данных. 
7 Умножение матриц (варианты распараллеливания вложенных циклов).
8 Разработайте программу для задачи вычисления определённого интеграла непрерывной функции f(x) по отрезку [a,b], с использованием метода прямоугольников. 
9 Разработайте программу для задачи вычисления определённого интеграла непрерывной функции f(x)  по отрезку [a,b] , с использованием формулы трапеций.
10 Разработайте программу для задачи вычисления определённого интеграла непрерывной функции f(x) по отрезку [a, b], с использованием формулы Симпсона.
11 Требуется реализовать вычисление числа \ln2 с помощью формулы:
\ln2 = \sum_{n=1}^{\infty } \frac{(-1)^{n+1}}{n}

12 Требуется реализовать вычисление числа \frac{\Pi^2}{6} с помощью формулы:
\frac{\Pi^{2}}{6} = \sum_{n=1}^{\infty}\frac{1}{n^{2}}

13 Требуется реализовать вычисление числа \frac{\Pi^2}{12}  с помощью формулы:
\frac{\Pi^{2}}{12} = \sum_{n=1}^{\infty}\frac{(-1)^{n+1}}{n^{2}}

14 Требуется реализовать вычисление числа  \frac{\P}{2} с помощью формулы Валлиса:
\frac{\Pi}{22} = \prod_{n=1}^{\infty}\frac{4*n^2}{4*n^2 - 1}


ЗАДАЧИ MPI

Задачи на пересылку данных

1 В каждом из процессов, входящих в коммуникатор MPI_COMM_WORLD, прочесть одно вещественное число и вывести его противоположное значение. 
2 В каждом из процессов, входящих в коммуникатор MPI_COMM_WORLD, прочесть одно целое число A и вывести его удвоенное значение. Кроме того, для главного процесса (процесса ранга 0) вывести количество процессов, входящих в коммуникатор MPI_COMM_WORLD. 
3 В главном процессе прочесть вещественное число X и вывести его противоположное значение, в каждом из остальных процессов (подчинённых процессов, ранг которых больше 0) вывести его ранг. 
4 В процессах чётного ранга (включая главный) ввести целое число и вывести его удвоенное значение. В процессах нечётного ранга не выполнять никаких действий. 
5 В процессах чётного ранга (включая главный) ввести целое число, в процессах нечётного ранга ввести вещественное число. В каждом процессе вывести удвоенное значение введённого числа. 
6 В подчинённых процессах чётного ранга ввести целое число, в процессах нечётного ранга ввести вещественное число. В каждом подчинённом процессе вывести удвоенное значение введённого числа. В главном процессе не выполнять никаких действий. 
7 В каждом процессе чётного ранга (включая главный) дано целое число N (> 0) и набор из N вещественных чисел. Вывести в каждом из этих процессов сумму чисел из данного набора. В процессах нечётного ранга не выполнять никаких действий. 
8 В каждом процессе дано целое число N (> 0) и набор из N вещественных чисел. В процессах чётного ранга (включая главный) вывести сумму чисел из данного набора, в процессах нечётного ранга вывести среднее арифметическое чисел из данного набора. 
9 В каждом процессе дано целое число N (> 0) и набор из N вещественных чисел. В подчинённых процессах чётного ранга вывести сумму чисел из данного набора, в процессах нечётного ранга вывести среднее арифметическое чисел из данного набора, в главном процессе вывести произведение чисел из данного набора. 
10 В каждом процессе дано целое число N (> 0) и набор из N чисел, причём в подчинённых процессах нечётного ранга (1, 3, ...) набор содержит вещественные числа, в подчинённых процессах чётного ранга (2, 4, ...) — целые числа, а тип элементов в главном наборе зависит от общего количества процессов: если количество процессов нечётное, то набор содержит целые числа, а если чётное, то вещественные. В процессах чётного ранга (включая главный) вывести минимальный элемент из данного набора, в процессах нечётного ранга вывести максимальный элемент. 


Задачи на тему «Процессы и их ранги»

1 В каждом подчинённом процессе дано целое число. Переслать эти числа в главный процесс, используя функции MPI_Send и MPI_Recv (стандартные блокирующие функции для передачи и приема сообщения), и вывести их в главном процессе. Полученные числа выводить в порядке возрастания рангов переславших их процессов.
2 В главном процессе дан набор вещественных чисел; количество чисел равно количеству подчинённых процессов. С помощью функции MPI_Send переслать по одному числу в каждый из подчинённых процессов (первое число в процесс 1, второе — в процесс 2, и т. д.) и вывести в подчинённых процессах полученные числа.
3 В каждом подчинённом процессе даны четыре целых числа. Переслать эти числа в главный процесс, используя по одному вызову функции MPI_Send для каждого передающего процесса, и вывести их в главном процессе. Полученные числа выводить в порядке возрастания рангов переславших их процессов.
4 В главном процессе дано целое число N и набор из N чисел; K − 1 ≤ N < 10, где K — количество процессов. С помощью функции MPI_Send переслать по одному числу их данного набора в процессы 1, 2, …, K − 2, а оставшиеся числа — в процесс K − 1, и вывести полученные числа. В процессе K − 1 для определения количества полученных чисел использовать функцию MPI_Get_count.
5 В каждом подчинённом процессе дано целое число, причём только для одного процесса это число отлично от нуля. Переслать ненулевое число в главный процесс и вывести в главном процессе полученное число и ранг процесса, переславшего это число. Для приёма сообщения в главном процессе использовать функцию MPI_Recv с параметром MPI_ANY_SOURCE.
6 В каждом подчинённом процессе дано целое число N, причём для одного процесса это число больше нуля, а для остальных равно нулю. В процессе с ненулевым N дан также набор из N чисел. Переслать данный набор чисел в главный процесс и вывести в главном процессе полученные числа и ранг процесса, переславшего этот набор. При приёме сообщения использовать параметр MPI_ANY_SOURCE.
7 В каждом подчинённом процессе дано целое число N, в главном процессе дано целое число K (> 0), равное количеству тех подчинённых процессов, в которых даны положительные числа N. Переслать все положительные числа N в главный процесс и вывести в нем сумму полученных чисел. Для приёма сообщений в главном процессе использовать функцию MPI_Recv с параметром MPI_ANY_SOURCE.
8 В каждом процессе даны два числа: вещественное A и целое N, причём набор чисел N содержит все значения от 0 до K − 1, где K — количество процессов. Используя функции MPI_Send и MPI_Recv (с параметром MPI_ANY_SOURCE), выполнить в каждом процессе пересылку числа A в процесс N и вывести полученное число, а также ранг процесса, из которого число было получено.
9 В каждом процессе дано целое число N, причём для одного процесса значение N равно 1, а для остальных равно 0. В процессе с N = 1 дан также набор из K − 1 числа, где K — количество процессов. Переслать из этого процесса по одному из чисел данного набора в остальные процессы, перебирая ранги получателей в возрастающем порядке, и вывести в каждом из них полученное число.
10 В каждом процессе дан набор из K − 1 целого числа, где K — количество процессов. Для каждого процесса переслать по одному из данных в нем чисел в остальные процессы, перебирая ранги процессов-получателей в возрастающем порядке, и вывести полученные числа в порядке возрастания рангов переславших их процессов.
11 В каждом подчинённом процессе дано вещественное число A и его порядковый номер N (целое число); набор всех номеров N содержит все целые числа от 1 до K − 1, где K — количество процессов. Переслать числа A в главный процесс и вывести их в порядке, соответствующем возрастанию их номеров N. Массивы не использовать; для передачи номера N указывать его в качестве параметра tag функции MPI_Send.
12 В каждом подчинённом процессе дано целое число L (≥ 0) и набор из L пар чисел (A, N), где A — вещественное число, а N — его порядковый номер. Все числа L в сумме равны 2K, где K — количество процессов; набор номеров N, данных во всех процессах, содержит все целые числа от 1 до 2K. Переслать числа A в главный процесс и вывести их в порядке, соответствующем возрастанию их номеров N. Массивы не использовать; для передачи номера N указывать его в качестве параметра tag функции MPI_Send.
13 В каждом подчинённом процессе дано вещественное число. Переслать эти числа в главный процесс, используя функции MPI_Bsend (посылка сообщения с буферизацией) и MPI_Recv, и вывести их в главном процессе. Полученные числа выводить в порядке убывания рангов переславших их процессов. Для задания буфера использовать функцию MPI_Buffer_attach.
14 В главном процессе дан набор вещественных чисел; количество чисел равно количеству подчинённых процессов. С помощью функции MPI_Bsend переслать по одному числу в каждый из подчинённых процессов, перебирая процессы в обратном порядке (первое число в последний процесс, второе — в предпоследний процесс, и т. д.), и вывести в подчинённых процессах полученные числа. 
15 В каждом подчинённом процессе дано целое число N (0 < N < 5) и набор из N целых чисел. Переслать данные наборы в главный процесс, используя по одному вызову функции MPI_Bsend для каждого передающего процесса, и вывести наборы в главном процессе в порядке возрастания рангов переславших их процессов. Для определения размера пересланного набора использовать функцию MPI_Get_count.
16 В каждом процессе дано вещественное число. Переслать число из главного процесса во все подчинённые процессы, а все числа из подчинённых процессов — в главный, и вывести в каждом процессе полученные числа (в главном процессе числа выводить в порядке возрастания рангов переславших их процессов). Для отправки сообщений использовать функцию MPI_Ssend. 
Указание. Функция MPI_Ssend обеспечивает синхронный режим пересылки данных, при котором операция отправки сообщения будет завершена только после начала приема этого сообщения процессом-получателем. В случае пересылки данных в синхронном режиме возникает опасность взаимных блокировок (deadlocks) из-за неправильного порядка вызова функций отправки и получения сообщений.
17 В каждом процессе дано целое число. С помощью функций MPI_Ssend и MPI_Recv осуществить для всех процессов циклический сдвиг данных с шагом 1, переслав число из процесса 0 в процесс 1, из процесса 1 в процесс 2, …, из последнего процесса в процесс 0. В каждом процессе вывести полученное число. Указание. См. указание к задаче 16.
18 В каждом процессе дано целое число. С помощью функций MPI_Ssend и MPI_Recv осуществить для всех процессов циклический сдвиг данных с шагом −1, переслав число из процесса 1 в процесс 0, из процесса 2 в процесс 1, …, из процесса 0 в последний процесс. В каждом процессе вывести полученное число. Указание. См. указание к задаче 16.
19 В каждом процессе даны два целых числа. С помощью функций MPI_Ssend и MPI_Recv переслать первое число в предыдущий процесс, а второе — в последующий процесс (для процесса 0 считать предыдущим последний процесс, а для последнего процесса считать последующим процесс 0). В каждом процессе вывести числа, полученные от предыдущего и последующего процесса (в указанном порядке). Указание. См. указание к задаче 16.
20 Количество процессов — чётное число. В каждом процессе дано целое число N (0 < N < 5) и набор из N чисел. С помощью функции MPI_Sendrecv выполнить обмен исходными наборами между парами процессов 0 и 1, 2 и 3, и т. д. В каждом процессе вывести полученный набор чисел.
21 В каждом процессе дано вещественное число. С помощью функции MPI_Sendrecv_replace поменять порядок исходных чисел на обратный (число из процесса 0 должно быть передано в последний процесс, число из процесса 1 — в предпоследний процесс, …, число из последнего процесса — в процесс 0). В каждом процессе вывести полученное число.
